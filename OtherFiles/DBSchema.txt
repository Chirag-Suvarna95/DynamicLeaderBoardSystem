-- Step 1: Create the database
CREATE DATABASE GamingLeaderboard;

-- Step 2: Use the database
USE GamingLeaderboard;


CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE
    password VARCHAR(255) NOT NULL
);


CREATE TABLE Games (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);


CREATE TABLE Scores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    game_id INT NOT NULL,
    score INT NOT NULL,
    date_achieved DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (game_id) REFERENCES Games(id)
);

CREATE TABLE Top10 (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL UNIQUE,
    total_score INT NOT NULL,
    date_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
);


CREATE TABLE Userprofiles (
    user_id INT NOT NULL PRIMARY KEY,
    bio TEXT,
    location VARCHAR(100),
    date_of_birth DATE,
    website VARCHAR(255),
    steamID VARCHAR(50),
    EpicID VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
);

----------------------------------------------------------------------------


DELIMITER //

CREATE TRIGGER after_scores_change
AFTER INSERT ON Scores
FOR EACH ROW
BEGIN
    DECLARE total_score INT;

    -- Calculate the new total score for the user
    SELECT SUM(score) INTO total_score 
    FROM Scores 
    WHERE user_id = NEW.user_id;

    -- Update or insert into Top10 table
    INSERT INTO Top10 (user_id, total_score, date_updated)
    VALUES (NEW.user_id, total_score, NOW())
    ON DUPLICATE KEY UPDATE 
        total_score = total_score,  -- This line should be replaced with an actual update if needed.
        date_updated = NOW();
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_scores_update
AFTER UPDATE ON Scores
FOR EACH ROW
BEGIN
    DECLARE total_score INT;

    -- Calculate the new total score for the user
    SELECT SUM(score) INTO total_score 
    FROM Scores 
    WHERE user_id = NEW.user_id;

    -- Update Top10 table with new total score
    UPDATE Top10 
    SET total_score = total_score, date_updated = NOW()
    WHERE user_id = NEW.user_id;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_scores_delete
AFTER DELETE ON Scores
FOR EACH ROW
BEGIN
    DECLARE total_score INT;

    -- Calculate the new total score for the user after deletion
    SELECT SUM(score) INTO total_score 
    FROM Scores 
    WHERE user_id = OLD.user_id;

    IF (total_score IS NULL OR total_score = 0) THEN
        DELETE FROM Top10 WHERE user_id = OLD.user_id; -- Remove from Top10 if no scores left
    ELSE
        UPDATE Top10 
        SET total_score = total_score, date_updated = NOW()
        WHERE user_id = OLD.user_id;
    END IF;
END //

DELIMITER ;

